
*********************************************************Regular Expression*************************************************
// [abc]  ---> a,b or c
// [^abc]  ----> anycharacter except a,b,c
// [a-z]  ----> a to z
// [A-Z]  -----> A to Z
//  [a-z A-Z] ---> a to z, A to z
// [0-9]  ---> 0 to 9
// 
//[ ]? -----> occurs 0 or 1 times
//[]+ ------> occurs 1 or more times
//[]* -----> OCCURS 0 or more times
//[]{n} ----> ocurs n time
// []{n, } -----> ocurs n time or more
// []{y,z} -----> occurs atleast y times, but less than z time

//  \s ----> Whitespace (space,tab,newline)

// | --------> either or
***************************************************
//    [Regex]       [Metacharacter]
        \d            [0-9]
        \D            [^ 0-9]
        \w            [a-zA-Z_0-9]
        \W (captial w)  [^\w]
        
        
        1. Examples :(mobile number with 8 or 9 and totAL digits =10)
            [89][0-9]{9}
            
        2. first character uppercase,contains lower case,only one digit allowed between
           [A-Z][a-z]*[0-9][a-z]*
           
         3. Email ID ---> ajin123@gmail.com
            [a-zA-Z0-9_\-\.]+[@][a-z]+[\.][a-z]{2,3}


Using literals:
javascript
Copy code
const regex = /pattern/;(/ & / should be used before the word that you are going to use)
Using the RegExp constructor:
javascript
Copy code
const regex = new RegExp('pattern');
Common Metacharacters and Patterns
Literal Characters: Matches the exact characters you type.

javascript
Copy code
const regex = /cat/;
const str = "The cat is cute.";
console.log(regex.test(str)); // true
Dot (.): Matches any single character except newline.

javascript
Copy code
const regex = /c.t/;
console.log(regex.test("cat")); // true
console.log(regex.test("cut")); // true
console.log(regex.test("c.t")); // false
Caret (^): Matches the start of a string.

javascript
Copy code
const regex = /^cat/;
console.log(regex.test("cat is cute")); // true
console.log(regex.test("The cat is cute")); // false
Dollar ($): Matches the end of a string.

javascript
Copy code
const regex = /cat$/;
console.log(regex.test("The pet is a cat")); // true
console.log(regex.test("The cat is cute")); // false
Asterisk (*): Matches 0 or more of the preceding element.

javascript
Copy code
const regex = /ca*t/;
console.log(regex.test("ct")); // true
console.log(regex.test("cat")); // true
console.log(regex.test("caaat")); // true
Plus (+): Matches 1 or more of the preceding element.

javascript
Copy code
const regex = /ca+t/;
console.log(regex.test("ct")); // false
console.log(regex.test("cat")); // true
console.log(regex.test("caaat")); // true
Question Mark (?): Matches 0 or 1 of the preceding element.

javascript
Copy code
const regex = /ca?t/;
console.log(regex.test("ct")); // true
console.log(regex.test("cat")); // true
console.log(regex.test("caaat")); // false
Braces ({n,m}): Matches between n and m times.

javascript
Copy code
const regex = /ca{2,4}t/;
console.log(regex.test("cat")); // false
console.log(regex.test("caat")); // true
console.log(regex.test("caaat")); // true
console.log(regex.test("caaaaat")); // false
Square Brackets ([ ]): Matches any one of the enclosed characters.

javascript
Copy code
const regex = /c[aeiou]t/;
console.log(regex.test("cat")); // true
console.log(regex.test("cit")); // true
console.log(regex.test("cot")); // true
console.log(regex.test("czt")); // false
Pipe (|): Acts as an OR operator.

javascript
Copy code
const regex = /cat|dog/;
console.log(regex.test("cat")); // true
console.log(regex.test("dog")); // true
console.log(regex.test("mouse")); // false
Capturing Groups and Backreferences
Parentheses (( )): Groups a part of the pattern.

javascript
Copy code
const regex = /(cat|dog) is cute/;
console.log(regex.test("cat is cute")); // true
console.log(regex.test("dog is cute")); // true
Backreferences (\1, \2, ...): Refers to the captured group.

javascript
Copy code
const regex = /(\w+)\s\1/;
console.log(regex.test("hello hello")); // true
console.log(regex.test("hello world")); // false
Example: Validating an Email
Let's use what we've learned to validate an email address:

javascript
Copy code
const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

console.log(emailRegex.test("example@example.com")); // true
console.log(emailRegex.test("invalid-email")); // false
JavaScript Methods for Regex
test method: Tests for a match in a string.

javascript
Copy code
const regex = /cat/;
console.log(regex.test("The cat is cute.")); // true
match method: Retrieves the matches when matching a string against a regex.

javascript
Copy code
const str = "The cat is cute.";
const matches = str.match(/cat/);
console.log(matches); // ["cat"]
replace method: Replaces matches with a new substring.

javascript
Copy code
const str = "The cat is cute.";
const newStr = str.replace(/cat/, "dog");
console.log(newStr); // "The dog is cute."
split method: Splits a string into an array of substrings.

javascript
Copy code
const str = "one,two,three";
const parts = str.split(/,/);
console.log(parts); // ["one", "two", "three"]
            
**********************************************how to use (for in) and (for of) in JS*****************************

for(int arr in person){
console.log(person[arr])  // ib for in loop of jS, it focus on the index value
}

second one ::::::

for(int arr of person){
console.log(arr);   //the var loop is going to store the actual values
}

person.push("soham");
person.pop();
******************************************************String understanding*******************************

***************************************************************Array in Jav script******************************************
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo Projects</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

    <div>

<!-- This div is for understanding the animation -->
    <!-- </div>

    <div class="animationunderstanding"> -->
        <button onclick="advanced()">clickeme for advanced function understanding</button>
        <button onclick="filtermapreduce()">filtercheck</button>
        <button onclick="callme()">Callme</button>
        
    </div>
    <script src="./Advancedjs.js"></script>

    
</body>
</html>


:::::::js code:::::



function advanced(){
    const array=[1,2,3,4,5];
    array.forEach((callbackvariable)=>{console.log(callbackvariable);

    });
}

function filtermapreduce(){

    const array=[1,2,3,4,5,6,7];
    const result=array.map(mappedvalue=>mappedvalue*2).filter(filteredvalue=>filteredvalue%2==0).reduce((initial,next)=>
        initial+next,0);
    console.log(result);
  


}

//object literals
const objectcreation={
    name:"ajin",
    person: ()=>{return "This is my address"},
    Address: {
        street:"123",
        native:"Bangalore",
        location:"chennai"
    },
    Age:25,
    person(){
console.log("hi this also i shall do")
    }

}
function callme(){

    console.log(objectcreation.Address.location)
    console.log(objectcreation.person)
}

//spread operator
const array1=[1,2,3]
const array2=[3,4,5];
const join=array1.concat(array2);
const spreadoperator=[...array1,4,5,6,7]
console.log(join);
console.log(spreadoperator);

//spread operator exact usage
const input1=100;
const input2=[23,45,67,89]
const input3="hello"
function spreadchecker(input1,input2,input3){
    //Spread operator 
    const finalvalue=[...input1.toString(),...input2,...input3]
    console.log(finalvalue);
}

spreadchecker(input1,input2,input3);


************************************************************************Array Destructuring***************************************************


